const fs = require('fs').promises;

// Fun√ß√£o ass√≠ncrona para ler o arquivo JSON
async function lerCardapio(nomeArquivo) {
    try {
        const data = await fs.readFile(nomeArquivo, 'utf8');
        const cardapio = JSON.parse(data);
        return cardapio;
    } catch (error) {
        throw error;
    }
}


// Caminho para o arquivo JSON
const caminhoArquivo = './cardapio/burguers.json';


async function cardapioIndividual(lanche) {
    try {
        const cardapio = await lerCardapio(caminhoArquivo);
        if (cardapio) {
            const produto = cardapio[lanche];
            if (produto) {
                const produtoNome = produto.produto;
                const ingredientes = produto.ingredientes;
                const valor = produto.valor;
                return { produtoNome, ingredientes, valor };
            } else {
                throw new Error("√çndice n√£o encontrado: " + lanche);
            }
        } else {
            throw new Error("Erro ao ler o card√°pio.");
        }
    } catch (error) {
        throw error;
    }
}



async function cardapioCompleto(callback) {
    try {
        const cardapio = await lerCardapio(caminhoArquivo);
        if (cardapio) {
            let output = "";
            Object.keys(cardapio).forEach((indice, i) => {
                const emoji = emojisNumeros[i];
                const { produto, valor, ingredientes } = cardapio[indice];
                output += `${emoji} ${produto}\n   ‚ùØ ${ingredientes.join(", ")}\n   ‚ùØ R$: ${valor}\n\n`;
            });
            callback(output, null);
        } else {
            callback(null, "Erro ao ler o card√°pio.");
        }
    } catch (error) {
        callback(null, error);
    }
}

async function sandubaCompleto(callback) {
    try {
        const cardapio = await lerCardapio(caminhoArquivo);
        if (cardapio) {
            let output = "";
            Object.keys(cardapio).forEach((indice, i) => {
                const emoji = emojisNumeros[i];
                const { produto, valor, ingredientes } = cardapio[indice];
                output += `${emoji} ${produto}\n   ‚ùØ R$: ${valor}\n\n`;
            });
            callback(output, null);
        } else {
            callback(null, "Erro ao ler o card√°pio.");
        }
    } catch (error) {
        callback(null, error);
    }
}

async function cardapioExtras(lanche) {
    try {
        const cardapio = await lerCardapio(caminhoArquivo);
        if (cardapio) {
            const produto = cardapio[lanche];
            if (produto) {
                let extrasString = '';
                const extrasPrecos = produto.extrasPrecos;
                Object.keys(extrasPrecos).forEach((extra, index) => {
                    const numeroEmoji = emojisNumeros[index]; // Obter emoji do n√∫mero
                    extrasString += `${numeroEmoji} ${extra}: R$ ${extrasPrecos[extra]}\n`;
                });
                return extrasString;
            } else {
                throw new Error("√çndice n√£o encontrado: " + lanche);
            }
        } else {
            throw new Error("Erro ao ler o card√°pio.");
        }
    } catch (error) {
        throw error;
    }
}


async function valorExtraEspecifico(lanche, indiceExtra) {
    try {
        const cardapio = await lerCardapio(caminhoArquivo);
        if (cardapio) {
            const produto = cardapio[lanche];
            if (produto) {
                const extrasPrecos = Object.values(produto.extrasPrecos); // Obt√©m os pre√ßos dos extras
                const valorExtra = extrasPrecos[indiceExtra - 1]; // Subtrai 1 para obter o √≠ndice correto
                if (valorExtra) {
                    return valorExtra;
                } else {
                    throw new Error(`Extra no √≠ndice '${indiceExtra}' n√£o encontrado no lanche ${lanche}.`);
                }
            } else {
                throw new Error("Lanche n√£o encontrado: " + lanche);
            }
        } else {
            throw new Error("Erro ao ler o card√°pio.");
        }
    } catch (error) {
        throw error;
    }
}


const emojisNumeros = [
    "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", 
    "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü",
    "1Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£",
    "1Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£", "2Ô∏è‚É£0Ô∏è‚É£"
];

module.exports = {
    cardapioIndividual,
    cardapioCompleto,
    cardapioExtras,
    valorExtraEspecifico,
    sandubaCompleto
};